// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "planmyjourney")]
    public partial class PlanMyJourneyWidgetTestsFeature : object, Xunit.IClassFixture<PlanMyJourneyWidgetTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "planmyjourney"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PlanMyJourneyWidgetTests.feature"
#line hidden
        
        public PlanMyJourneyWidgetTestsFeature(PlanMyJourneyWidgetTestsFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PlanMyJourneyWidgetTests", "Cookies are accepted before each scenario ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify that a valid journey can be planned using the widget")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify that a valid journey can be planned using the widget")]
        [Xunit.InlineDataAttribute("Oxford Circus Underground Station", "London Gatwick Airport", new string[0])]
        [Xunit.InlineDataAttribute("Heathrow Airport Terminal 4", "Sutton Common Rail Station", new string[0])]
        public void VerifyThatAValidJourneyCanBePlannedUsingTheWidget(string fromLocation, string toLocation, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FromLocation", fromLocation);
            argumentsOfScenario.Add("ToLocation", toLocation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a valid journey can be planned using the widget", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table1.AddRow(new string[] {
                            string.Format("{0}", fromLocation),
                            string.Format("{0}", toLocation)});
#line 7
 testRunner.Given("I enter the From and To Locations", ((string)(null)), table1, "Given ");
#line hidden
#line 10
 testRunner.When("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("I verify the details in journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify that the widget is unable to provide results when one or more invalid loca" +
            "tions are used")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify that the widget is unable to provide results when one or more invalid loca" +
            "tions are used")]
        [Xunit.InlineDataAttribute("Sutton Common Rail Station", "InvalidLocation 123", "Sorry, we can\'t find a journey matching your criteria", new string[0])]
        [Xunit.InlineDataAttribute("InvalidLocation 1678", "Heathrow Airport Terminal 4", "Sorry, we can\'t find a journey matching your criteria", new string[0])]
        [Xunit.InlineDataAttribute("23400", "34235", "Journey planner could not find any results to your search. Please try again", new string[0])]
        public void VerifyThatTheWidgetIsUnableToProvideResultsWhenOneOrMoreInvalidLocationsAreUsed(string fromLocation, string toLocation, string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("FromLocation", fromLocation);
            argumentsOfScenario.Add("ToLocation", toLocation);
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the widget is unable to provide results when one or more invalid loca" +
                    "tions are used", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table2.AddRow(new string[] {
                            string.Format("{0}", fromLocation),
                            string.Format("{0}", toLocation)});
#line 19
 testRunner.Given("I enter the From and To Locations", ((string)(null)), table2, "Given ");
#line hidden
#line 22
 testRunner.When("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Error"});
                table3.AddRow(new string[] {
                            string.Format("{0}", errorMessage)});
#line 23
 testRunner.Then("I verify the error messages in Journey Results page", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify that the widget is unable to plan a journey if no locations are entered in" +
            "to the widget")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify that the widget is unable to plan a journey if no locations are entered in" +
            "to the widget")]
        [Xunit.InlineDataAttribute("The From field is required.", new string[0])]
        [Xunit.InlineDataAttribute("The To field is required.", new string[0])]
        public void VerifyThatTheWidgetIsUnableToPlanAJourneyIfNoLocationsAreEnteredIntoTheWidget(string errorMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ErrorMessage", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the widget is unable to plan a journey if no locations are entered in" +
                    "to the widget", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Error"});
                table4.AddRow(new string[] {
                            string.Format("{0}", errorMessage)});
#line 35
 testRunner.Then("I verify the field error messages in Plan my journey page", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify change time link on the journey planner displays “Arriving” option and pla" +
            "n a journey based on arrival time")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify change time link on the journey planner displays “Arriving” option and pla" +
            "n a journey based on arrival time")]
        public void VerifyChangeTimeLinkOnTheJourneyPlannerDisplaysArrivingOptionAndPlanAJourneyBasedOnArrivalTime()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify change time link on the journey planner displays “Arriving” option and pla" +
                    "n a journey based on arrival time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table5.AddRow(new string[] {
                            "Oxford Circus Underground Station",
                            "Heathrow Airport Terminal 4"});
#line 45
 testRunner.Given("I enter the From and To Locations", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "TimeOptions",
                            "Day",
                            "Time"});
                table6.AddRow(new string[] {
                            "Arriving",
                            "Tomorrow",
                            "10:45"});
#line 48
 testRunner.And("I set the Change time in Journey Planner", ((string)(null)), table6, "And ");
#line hidden
#line 51
 testRunner.When("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.Then("I verify the arrival time on journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that a journey on the Journey results page can be amended by using the “Ed" +
            "it Journey” button")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify that a journey on the Journey results page can be amended by using the “Ed" +
            "it Journey” button")]
        public void VerifyThatAJourneyOnTheJourneyResultsPageCanBeAmendedByUsingTheEditJourneyButton()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that a journey on the Journey results page can be amended by using the “Ed" +
                    "it Journey” button", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table7.AddRow(new string[] {
                            "Heathrow Airport Terminal 4",
                            "Oxford Circus Underground Station"});
#line 55
 testRunner.Given("I enter the From and To Locations", ((string)(null)), table7, "Given ");
#line hidden
#line 58
 testRunner.When("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.And("I verify the details in journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("I click on edit journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table8.AddRow(new string[] {
                            "Sutton Common Rail Station",
                            "Marble Arch Underground Station"});
#line 61
 testRunner.And("I edit the journey location details", ((string)(null)), table8, "And ");
#line hidden
#line 64
 testRunner.And("I click on update my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.Then("I verify the details in journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify that the “Recents” tab on the widget displays a list of recently planned j" +
            "ourneys")]
        [Xunit.TraitAttribute("FeatureTitle", "PlanMyJourneyWidgetTests")]
        [Xunit.TraitAttribute("Description", "Verify that the “Recents” tab on the widget displays a list of recently planned j" +
            "ourneys")]
        public void VerifyThatTheRecentsTabOnTheWidgetDisplaysAListOfRecentlyPlannedJourneys()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that the “Recents” tab on the widget displays a list of recently planned j" +
                    "ourneys", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table9.AddRow(new string[] {
                            "Heathrow Airport Terminal 4",
                            "Oxford Circus Underground Station"});
#line 68
 testRunner.Given("I enter the From and To Locations", ((string)(null)), table9, "Given ");
#line hidden
#line 71
 testRunner.When("I click on plan my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("I verify the details in journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("I click on edit journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "From Location",
                            "To Location"});
                table10.AddRow(new string[] {
                            "Sutton Common Rail Station",
                            "Marble Arch Underground Station"});
#line 74
 testRunner.And("I edit the journey location details", ((string)(null)), table10, "And ");
#line hidden
#line 77
 testRunner.And("I click on update my journey button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("I verify the details in journey results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.And("I select a travel option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.And("I navigate to plan a journey home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("I click on the Recent tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
 testRunner.Then("I verify the recent journeys made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PlanMyJourneyWidgetTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PlanMyJourneyWidgetTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
